{"ast":null,"code":"var _jsxFileName = \"D:\\\\BIGBOI\\\\Documents\\\\Acronymgame\\\\acronym-game-site\\\\acronymgame\\\\src\\\\contexts\\\\WSContext.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  useEffect,\n  createContext,\n  useRef\n} = require(\"react\");\nconst WebSocketContext = createContext();\nfunction WebSocketProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const ws = useRef(null);\n  const channels = useRef({}); // maps each channel to the callback\n  /* called from a component that registers a callback for a channel */\n  const subscribe = (channel, callback) => {\n    channels.current[channel] = callback;\n  };\n  /* remove callback  */\n  const unsubscribe = channel => {\n    delete channels.current[channel];\n  };\n  useEffect(() => {\n    /* WS initialization and cleanup */\n    ws.current = new WebSocket('ws://ws-host:ws-port');\n    ws.current.onopen = () => {\n      console.log('WS open');\n    };\n    ws.current.onclose = () => {\n      console.log('WS close');\n    };\n    ws.current.onmessage = message => {\n      const {\n        type,\n        ...data\n      } = JSON.parse(message.data);\n      const chatChannel = `${type}_${data.chat}`;\n\n      // lookup for an existing chat in which this message belongs\n      // if no chat is subscribed send message to generic channel\n      if (channels.current[chatChannel]) {\n        /* in chat component the subscribed channel is `MESSAGE_CREATE_${id}` */\n        channels.current[chatChannel](data);\n      } else {\n        var _channels$current$typ, _channels$current;\n        /* in notifications wrapper the subscribed channel is `MESSAGE_CREATE` */\n        (_channels$current$typ = (_channels$current = channels.current)[type]) === null || _channels$current$typ === void 0 ? void 0 : _channels$current$typ.call(_channels$current, data);\n      }\n    };\n    return () => {\n      ws.current.close();\n    };\n  }, []);\n\n  /* WS provider dom */\n  /* subscribe and unsubscribe are the only required prop for the context */\n  return /*#__PURE__*/_jsxDEV(WebSocketContext.Provider, {\n    value: [subscribe, unsubscribe],\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_s(WebSocketProvider, \"J9IE0T5xxv8alOyfzLRStVHvX3Y=\");\n_c = WebSocketProvider;\nexport { WebSocketContext, WebSocketProvider };\nvar _c;\n$RefreshReg$(_c, \"WebSocketProvider\");","map":{"version":3,"names":["useEffect","createContext","useRef","require","WebSocketContext","WebSocketProvider","children","ws","channels","subscribe","channel","callback","current","unsubscribe","WebSocket","onopen","console","log","onclose","onmessage","message","type","data","JSON","parse","chatChannel","chat","close"],"sources":["D:/BIGBOI/Documents/Acronymgame/acronym-game-site/acronymgame/src/contexts/WSContext.js"],"sourcesContent":["const { useEffect, createContext, useRef } = require(\"react\")\r\n\r\nconst WebSocketContext = createContext()\r\n\r\nfunction WebSocketProvider({ children }) {\r\n    const ws = useRef(null)\r\n    const channels = useRef({}) // maps each channel to the callback\r\n    /* called from a component that registers a callback for a channel */\r\n    const subscribe = (channel, callback) => {\r\n        channels.current[channel] = callback\r\n    }\r\n    /* remove callback  */\r\n    const unsubscribe = (channel) => {\r\n        delete channels.current[channel]\r\n    }\r\n    useEffect(() => {\r\n        /* WS initialization and cleanup */\r\n        ws.current = new WebSocket('ws://ws-host:ws-port')\r\n        ws.current.onopen = () => { console.log('WS open') }\r\n        ws.current.onclose = () => { console.log('WS close') }\r\n        ws.current.onmessage = (message) => {\r\n            const { type, ...data } = JSON.parse(message.data)\r\n            const chatChannel = `${type}_${data.chat}`\r\n\r\n            // lookup for an existing chat in which this message belongs\r\n            // if no chat is subscribed send message to generic channel\r\n            if (channels.current[chatChannel]) {\r\n                /* in chat component the subscribed channel is `MESSAGE_CREATE_${id}` */\r\n                channels.current[chatChannel](data)\r\n            } else {\r\n                /* in notifications wrapper the subscribed channel is `MESSAGE_CREATE` */\r\n                channels.current[type]?.(data)\r\n            }\r\n        }\r\n        return () => { ws.current.close() }\r\n    }, [])\r\n\r\n    /* WS provider dom */\r\n    /* subscribe and unsubscribe are the only required prop for the context */\r\n    return (\r\n        <WebSocketContext.Provider value={[subscribe, unsubscribe]}>\r\n            {children}\r\n        </WebSocketContext.Provider>\r\n    )\r\n}\r\n\r\nexport { WebSocketContext, WebSocketProvider }"],"mappings":";;;AAAA,MAAM;EAAEA,SAAS;EAAEC,aAAa;EAAEC;AAAO,CAAC,GAAGC,OAAO,CAAC,OAAO,CAAC;AAE7D,MAAMC,gBAAgB,GAAGH,aAAa,EAAE;AAExC,SAASI,iBAAiB,OAAe;EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC;EACnC,MAAMC,EAAE,GAAGL,MAAM,CAAC,IAAI,CAAC;EACvB,MAAMM,QAAQ,GAAGN,MAAM,CAAC,CAAC,CAAC,CAAC,EAAC;EAC5B;EACA,MAAMO,SAAS,GAAG,CAACC,OAAO,EAAEC,QAAQ,KAAK;IACrCH,QAAQ,CAACI,OAAO,CAACF,OAAO,CAAC,GAAGC,QAAQ;EACxC,CAAC;EACD;EACA,MAAME,WAAW,GAAIH,OAAO,IAAK;IAC7B,OAAOF,QAAQ,CAACI,OAAO,CAACF,OAAO,CAAC;EACpC,CAAC;EACDV,SAAS,CAAC,MAAM;IACZ;IACAO,EAAE,CAACK,OAAO,GAAG,IAAIE,SAAS,CAAC,sBAAsB,CAAC;IAClDP,EAAE,CAACK,OAAO,CAACG,MAAM,GAAG,MAAM;MAAEC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAAC,CAAC;IACpDV,EAAE,CAACK,OAAO,CAACM,OAAO,GAAG,MAAM;MAAEF,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IAAC,CAAC;IACtDV,EAAE,CAACK,OAAO,CAACO,SAAS,GAAIC,OAAO,IAAK;MAChC,MAAM;QAAEC,IAAI;QAAE,GAAGC;MAAK,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACE,IAAI,CAAC;MAClD,MAAMG,WAAW,GAAI,GAAEJ,IAAK,IAAGC,IAAI,CAACI,IAAK,EAAC;;MAE1C;MACA;MACA,IAAIlB,QAAQ,CAACI,OAAO,CAACa,WAAW,CAAC,EAAE;QAC/B;QACAjB,QAAQ,CAACI,OAAO,CAACa,WAAW,CAAC,CAACH,IAAI,CAAC;MACvC,CAAC,MAAM;QAAA;QACH;QACA,8CAAAd,QAAQ,CAACI,OAAO,EAACS,IAAI,CAAC,0DAAtB,8CAAyBC,IAAI,CAAC;MAClC;IACJ,CAAC;IACD,OAAO,MAAM;MAAEf,EAAE,CAACK,OAAO,CAACe,KAAK,EAAE;IAAC,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA,oBACI,QAAC,gBAAgB,CAAC,QAAQ;IAAC,KAAK,EAAE,CAAClB,SAAS,EAAEI,WAAW,CAAE;IAAA,UACtDP;EAAQ;IAAA;IAAA;IAAA;EAAA,QACe;AAEpC;AAAC,GAxCQD,iBAAiB;AAAA,KAAjBA,iBAAiB;AA0C1B,SAASD,gBAAgB,EAAEC,iBAAiB;AAAE;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}